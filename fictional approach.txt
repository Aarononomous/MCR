# 1. Create a new instance of the Piano Movers' Problem
square = RandomPianoMoversProblem(shapes=14)

# 2. And solve it.
solve_pmp(square)

# 3. We can create a worst-case problem -- I call this an overlapped finger-joint,
# and solve it
fj_square = Overlapped_finger_joint(fingers=20)
solve_pmp(fj_square)
# Q: what form does the solution take?

# 4. We can import an SVG
svg_square = PMP_SVG('path/to/file.svg')

# 5. For any of these we can create a (labeled) graph
g = graph(svg_square)

# 6. And display the graph (with graphviz???)
graph(svg_square).display()

#7. Or display the PMP as an image
svg_square.display()

#8. (And export it?)

#9. Once we have the graph, we can do all sorts of graph operations on it.
dijkstra(g, s, t)

#10 And specialized graph operations on just this kind of multilabeled graph
remove_shape(10)

#11 We can reduce any graph to an instance of MAX2HORNSAT
h = horn(g)

#12 ...And solve that (Q: ???)
solve(h)

#13 We have tons of graph modification techniques
# graph-tool

# Shapes:
# class IPython.display.SVG(data=None, url=None, filename=None)

